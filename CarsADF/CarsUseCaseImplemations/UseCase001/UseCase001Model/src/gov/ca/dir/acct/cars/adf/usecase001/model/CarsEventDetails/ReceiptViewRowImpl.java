package gov.ca.dir.acct.cars.adf.usecase001.model.CarsEventDetails;

import java.math.BigDecimal;

import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Apr 10 10:59:44 PDT 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ReceiptViewRowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        OffsetPaymentCode {
            public Object get(ReceiptViewRowImpl obj) {
                return obj.getOffsetPaymentCode();
            }

            public void put(ReceiptViewRowImpl obj, Object value) {
                obj.setOffsetPaymentCode((String)value);
            }
        }
        ,
        AcctgTransactionId {
            public Object get(ReceiptViewRowImpl obj) {
                return obj.getAcctgTransactionId();
            }

            public void put(ReceiptViewRowImpl obj, Object value) {
                obj.setAcctgTransactionId((BigDecimal)value);
            }
        }
        ,
        AccountingEntryStatusView {
            public Object get(ReceiptViewRowImpl obj) {
                return obj.getAccountingEntryStatusView();
            }

            public void put(ReceiptViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        OffsetPaymentCodeView1 {
            public Object get(ReceiptViewRowImpl obj) {
                return obj.getOffsetPaymentCodeView1();
            }

            public void put(ReceiptViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(ReceiptViewRowImpl object);

        public abstract void put(ReceiptViewRowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int OFFSETPAYMENTCODE = AttributesEnum.OffsetPaymentCode.index();
    public static final int ACCTGTRANSACTIONID = AttributesEnum.AcctgTransactionId.index();
    public static final int ACCOUNTINGENTRYSTATUSVIEW = AttributesEnum.AccountingEntryStatusView.index();
    public static final int OFFSETPAYMENTCODEVIEW1 = AttributesEnum.OffsetPaymentCodeView1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ReceiptViewRowImpl() {
    }

    /**
     * Gets Receipt entity object.
     * @return the Receipt
     */
    public EntityImpl getReceipt() {
        return (EntityImpl)getEntity(0);
    }

    /**
     * Gets the attribute value for OFFSET_PAYMENT_CODE using the alias name OffsetPaymentCode.
     * @return the OFFSET_PAYMENT_CODE
     */
    public String getOffsetPaymentCode() {
        return (String) getAttributeInternal(OFFSETPAYMENTCODE);
    }

    /**
     * Sets <code>value</code> as attribute value for OFFSET_PAYMENT_CODE using the alias name OffsetPaymentCode.
     * @param value value to set the OFFSET_PAYMENT_CODE
     */
    public void setOffsetPaymentCode(String value) {
        setAttributeInternal(OFFSETPAYMENTCODE, value);
    }

    /**
     * Gets the attribute value for ACCTG_TRANSACTION_ID using the alias name AcctgTransactionId.
     * @return the ACCTG_TRANSACTION_ID
     */
    public BigDecimal getAcctgTransactionId() {
        return (BigDecimal) getAttributeInternal(ACCTGTRANSACTIONID);
    }

    /**
     * Sets <code>value</code> as attribute value for ACCTG_TRANSACTION_ID using the alias name AcctgTransactionId.
     * @param value value to set the ACCTG_TRANSACTION_ID
     */
    public void setAcctgTransactionId(BigDecimal value) {
        setAttributeInternal(ACCTGTRANSACTIONID, value);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link AccountingEntryStatusView.
     */
    public RowIterator getAccountingEntryStatusView() {
        return (RowIterator)getAttributeInternal(ACCOUNTINGENTRYSTATUSVIEW);
    }

    /**
     * Gets the view accessor <code>RowSet</code> OffsetPaymentCodeView1.
     */
    public RowSet getOffsetPaymentCodeView1() {
        return (RowSet)getAttributeInternal(OFFSETPAYMENTCODEVIEW1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
