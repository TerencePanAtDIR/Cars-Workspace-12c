package gov.ca.dir.acct.cars.adf.service.appmodule;

import gov.ca.dir.acct.cars.adf.common.code.ApplicationModuleImpl;

import gov.ca.dir.acct.cars.adf.common.code.ViewObjectImpl;
import gov.ca.dir.acct.cars.adf.service.appmodule.common.CarsBCLookupServicesAM;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.VariableValueManager;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Number;
import oracle.jbo.server.DBTransaction;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Aug 10 10:50:30 PDT 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CarsBCLookupServicesAMImpl extends ApplicationModuleImpl implements CarsBCLookupServicesAM {
    
    private static final String FUNC_GET_FISCAL_PERIOD_ID = "begin ? := FUNC_GET_FISCAL_PERIOD_ID(?); end;";


    /**
     * This is the default constructor (do not remove).
     */
    public CarsBCLookupServicesAMImpl() {
    }

    /**
     * Container's getter for AccountingCodeView1.
     * @return AccountingCodeView1
     */
    public ViewObjectImpl getAccountingCodeView1() {
        return (ViewObjectImpl)findViewObject("AccountingCodeView1");
    }

    /**
     * Container's getter for AccountingEntryTypeView1.
     * @return AccountingEntryTypeView1
     */
    public ViewObjectImpl getAccountingEntryTypeView1() {
        return (ViewObjectImpl)findViewObject("AccountingEntryTypeView1");
    }

    /**
     * Container's getter for AccountingReceivableStatusView1.
     * @return AccountingReceivableStatusView1
     */
    public ViewObjectImpl getAccountingReceivableStatusView1() {
        return (ViewObjectImpl)findViewObject("AccountingReceivableStatusView1");
    }

    /**
     * Container's getter for AcctgEntryEventAssocRuleView1.
     * @return AcctgEntryEventAssocRuleView1
     */
    public ViewObjectImpl getAcctgEntryEventAssocRuleView1() {
        return (ViewObjectImpl)findViewObject("AcctgEntryEventAssocRuleView1");
    }

    /**
     * Container's getter for AdjustmentTypeView1.
     * @return AdjustmentTypeView1
     */
    public ViewObjectImpl getAdjustmentTypeView1() {
        return (ViewObjectImpl)findViewObject("AdjustmentTypeView1");
    }

    /**
     * Container's getter for AgencySourceView1.
     * @return AgencySourceView1
     */
    public ViewObjectImpl getAgencySourceView1() {
        return (ViewObjectImpl)findViewObject("AgencySourceView1");
    }

    /**
     * Container's getter for ArStatusTypeView1.
     * @return ArStatusTypeView1
     */
    public ViewObjectImpl getArStatusTypeView1() {
        return (ViewObjectImpl)findViewObject("ArStatusTypeView1");
    }

    /**
     * Container's getter for BillTypeView1.
     * @return BillTypeView1
     */
    public ViewObjectImpl getBillTypeView1() {
        return (ViewObjectImpl)findViewObject("BillTypeView1");
    }

    /**
     * Container's getter for ContactMethodTypeView1.
     * @return ContactMethodTypeView1
     */
    public ViewObjectImpl getContactMethodTypeView1() {
        return (ViewObjectImpl)findViewObject("ContactMethodTypeView1");
    }

    /**
     * Container's getter for EventTypeAssociationRuleView1.
     * @return EventTypeAssociationRuleView1
     */
    public ViewObjectImpl getEventTypeAssociationRuleView1() {
        return (ViewObjectImpl)findViewObject("EventTypeAssociationRuleView1");
    }

    /**
     * Container's getter for EventTypeView1.
     * @return EventTypeView1
     */
    public ViewObjectImpl getEventTypeView1() {
        return (ViewObjectImpl)findViewObject("EventTypeView1");
    }

    /**
     * Container's getter for FiscalPeriodView1.
     * @return FiscalPeriodView1
     */
    public ViewObjectImpl getFiscalPeriodView1() {
        return (ViewObjectImpl)findViewObject("FiscalPeriodView1");
    }

    /**
     * Container's getter for FundAllocationView1.
     * @return FundAllocationView1
     */
    public ViewObjectImpl getFundAllocationView1() {
        return (ViewObjectImpl)findViewObject("FundAllocationView1");
    }

    /**
     * Container's getter for FundView1.
     * @return FundView1
     */
    public ViewObjectImpl getFundView1() {
        return (ViewObjectImpl)findViewObject("FundView1");
    }

    /**
     * Container's getter for GlAccountTypeView1.
     * @return GlAccountTypeView1
     */
    public ViewObjectImpl getGlAccountTypeView1() {
        return (ViewObjectImpl)findViewObject("GlAccountTypeView1");
    }

    /**
     * Container's getter for GlAccountAssociationRuleView1.
     * @return GlAccountAssociationRuleView1
     */
    public ViewObjectImpl getGlAccountAssociationRuleView1() {
        return (ViewObjectImpl)findViewObject("GlAccountAssociationRuleView1");
    }

    /**
     * Container's getter for IndexCodeView1.
     * @return IndexCodeView1
     */
    public ViewObjectImpl getIndexCodeView1() {
        return (ViewObjectImpl)findViewObject("IndexCodeView1");
    }

    /**
     * Container's getter for GlAccountView1.
     * @return GlAccountView1
     */
    public ViewObjectImpl getGlAccountView1() {
        return (ViewObjectImpl)findViewObject("GlAccountView1");
    }

    /**
     * Container's getter for OtherTransactionTypeView1.
     * @return OtherTransactionTypeView1
     */
    public ViewObjectImpl getOtherTransactionTypeView1() {
        return (ViewObjectImpl)findViewObject("OtherTransactionTypeView1");
    }

    /**
     * Container's getter for ParticipantRoleTypeView1.
     * @return ParticipantRoleTypeView1
     */
    public ViewObjectImpl getParticipantRoleTypeView1() {
        return (ViewObjectImpl)findViewObject("ParticipantRoleTypeView1");
    }

    /**
     * Container's getter for PartyAssociationTypeView1.
     * @return PartyAssociationTypeView1
     */
    public ViewObjectImpl getPartyAssociationTypeView1() {
        return (ViewObjectImpl)findViewObject("PartyAssociationTypeView1");
    }

    /**
     * Container's getter for PcaCodeView1.
     * @return PcaCodeView1
     */
    public ViewObjectImpl getPcaCodeView1() {
        return (ViewObjectImpl)findViewObject("PcaCodeView1");
    }

    /**
     * Container's getter for ProgramUnitView1.
     * @return ProgramUnitView1
     */
    public ViewObjectImpl getProgramUnitView1() {
        return (ViewObjectImpl)findViewObject("ProgramUnitView1");
    }

    /**
     * Container's getter for ReceiptTypeView1.
     * @return ReceiptTypeView1
     */
    public ViewObjectImpl getReceiptTypeView1() {
        return (ViewObjectImpl)findViewObject("ReceiptTypeView1");
    }

    /**
     * Container's getter for RevenueSourceCodeView1.
     * @return RevenueSourceCodeView1
     */
    public ViewObjectImpl getRevenueSourceCodeView1() {
        return (ViewObjectImpl)findViewObject("RevenueSourceCodeView1");
    }

    /**
     * Container's getter for TestView1.
     * @return TestView1
     */
    public ViewObjectImpl getTestView1() {
        return (ViewObjectImpl)findViewObject("TestView1");
    }

    /**
     * Container's getter for EventTypeLookupView1.
     * @return EventTypeLookupView1
     */
    public ViewObjectImpl getEventTypeLookupView1() {
        return (ViewObjectImpl)findViewObject("EventTypeLookupView1");
    }

    /**
     * Container's getter for EventTypeAssocRulesLookup1.
     * @return EventTypeAssocRulesLookup1
     */
    public ViewObjectImpl getEventTypeAssocRulesLookup1() {
        return (ViewObjectImpl)findViewObject("EventTypeAssocRulesLookup1");
    }

    /**
     * Container's getter for EventLookupView1.
     * @return EventLookupView1
     */
    public ViewObjectImpl getEventLookupView1() {
        return (ViewObjectImpl)findViewObject("EventLookupView1");
    }

    /**
     * Container's getter for FiscalPeriodLookupView1.
     * @return FiscalPeriodLookupView1
     */
    public ViewObjectImpl getFiscalPeriodLookupView1() {
        return (ViewObjectImpl)findViewObject("FiscalPeriodLookupView1");
    }

    /**
     * Container's getter for CreditRuleLookupView1.
     * @return CreditRuleLookupView1
     */
    public ViewObjectImpl getCreditRuleLookupView1() {
        return (ViewObjectImpl)findViewObject("CreditRuleLookupView1");
    }

    /**
     * Container's getter for DebitRuleLookupView1.
     * @return DebitRuleLookupView1
     */
    public ViewObjectImpl getDebitRuleLookupView1() {
        return (ViewObjectImpl)findViewObject("DebitRuleLookupView1");
    }

    /**
     * Container's getter for GlAccountAssocRuleLookupView1.
     * @return GlAccountAssocRuleLookupView1
     */
    public ViewObjectImpl getGlAccountAssocRuleLookupView1() {
        return (ViewObjectImpl)findViewObject("GlAccountAssocRuleLookupView1");
    }

    /**
     * Container's getter for ParticipantRoleView1.
     * @return ParticipantRoleView1
     */
    public ViewObjectImpl getParticipantRoleView1() {
        return (ViewObjectImpl)findViewObject("ParticipantRoleView1");
    }

    /**
     * Container's getter for AcctgTransactEventAssocView1.
     * @return AcctgTransactEventAssocView1
     */
    public ViewObjectImpl getAcctgTransactEventAssocView1() {
        return (ViewObjectImpl)findViewObject("AcctgTransactEventAssocView1");
    }

    /**
     * Container's getter for AccountingCodeLookupView1.
     * @return AccountingCodeLookupView1
     */
    public ViewObjectImpl getAccountingCodeLookupView1() {
        return (ViewObjectImpl)findViewObject("AccountingCodeLookupView1");
    }

    /**
     * Container's getter for NoteTypeView1.
     * @return NoteTypeView1
     */
    public ViewObjectImpl getNoteTypeView1() {
        return (ViewObjectImpl)findViewObject("NoteTypeView1");
    }

    /**
     * Container's getter for ContactMethodView1.
     * @return ContactMethodView1
     */
    public ViewObjectImpl getContactMethodView1() {
        return (ViewObjectImpl)findViewObject("ContactMethodView1");
    }

    /**
     * Container's getter for AccountingTransactionView1.
     * @return AccountingTransactionView1
     */
    public ViewObjectImpl getAccountingTransactionView1() {
        return (ViewObjectImpl)findViewObject("AccountingTransactionView1");
    }


    /**
     * Container's getter for AddressView1.
     * @return AddressView1
     */
    public ViewObjectImpl getAddressView1() {
        return (ViewObjectImpl)findViewObject("AddressView1");
    }
    
    /**
     * Container's getter for AccountingEntryStatusView1.
     * @return AccountingEntryStatusView1
     */
    public gov.ca.dir.acct.cars.adf.common.code.ViewObjectImpl getAccountingEntryStatusView1() {
        return (gov.ca.dir.acct.cars.adf.common.code.ViewObjectImpl)findViewObject("AccountingEntryStatusView1");
    }

    /**
     * Container's getter for BatchTypeView1.
     * @return BatchTypeView1
     */
    public gov.ca.dir.acct.cars.adf.common.code.ViewObjectImpl getBatchTypeView1() {
        return (gov.ca.dir.acct.cars.adf.common.code.ViewObjectImpl)findViewObject("BatchTypeView1");
    }

    /**
     * Container's getter for FsEntryTypeView1.
     * @return FsEntryTypeView1
     */
    public gov.ca.dir.acct.cars.adf.common.code.ViewObjectImpl getFsEntryTypeView1() {
        return (gov.ca.dir.acct.cars.adf.common.code.ViewObjectImpl)findViewObject("FsEntryTypeView1");
    }

    /**
     * Container's getter for FsEntryReasonTypeView1.
     * @return FsEntryReasonTypeView1
     */
    public gov.ca.dir.acct.cars.adf.common.code.ViewObjectImpl getFsEntryReasonTypeView1() {
        return (gov.ca.dir.acct.cars.adf.common.code.ViewObjectImpl)findViewObject("FsEntryReasonTypeView1");
    }

    /**
     * Container's getter for ReferenceCodeListView1.
     * @return ReferenceCodeListView1
     */
    public gov.ca.dir.acct.cars.adf.common.code.ViewObjectImpl getReferenceCodeListView1() {
        return (gov.ca.dir.acct.cars.adf.common.code.ViewObjectImpl)findViewObject("ReferenceCodeListView1");
    }

    /**
     * Container's getter for ReferenceCodeListLookupView1.
     * @return ReferenceCodeListLookupView1
     */
    public ViewObjectImpl getReferenceCodeListLookupView1() {
        return (ViewObjectImpl)findViewObject("ReferenceCodeListLookupView1");
    }

    /**
     * Container's getter for AccountingEntryView1.
     * @return AccountingEntryView1
     */
    public ViewObjectImpl getAccountingEntryView1() {
        return (ViewObjectImpl)findViewObject("AccountingEntryView1");
    }   
    
    /**
     * Container's getter for CountryCodeLookupView1.
     * @return CountryCodeLookupView1
     */
    public ViewObjectImpl getCountryCodeLookupView1() {
        return (ViewObjectImpl)findViewObject("CountryCodeLookupView1");
    }

    /**
     * Container's getter for StateCodeLookupView1.
     * @return StateCodeLookupView1
     */
    public ViewObjectImpl getStateCodeLookupView1() {
        return (ViewObjectImpl)findViewObject("StateCodeLookupView1");
    }    
    
    /**
     * looks up Fiscal Period Id for given Root Document. This function is inused in
     * all SOA bpel processes in order to find the correct Accountng Code.
     * 
     * @param rootDocument    String
     * @return Fiscal Period Id String
     * 
     */
    public String findFiscalPeriodIdWithParams(String rootDocument) {

        if (rootDocument == null || rootDocument.isEmpty()) {
             new JboException("Root Document cannot be empty");
        }

        String fiscalPeriodId = null;
        CallableStatement callableStm = null;
        DBTransaction dbTransaction = getDBTransaction();  
        
        //call FUNC_GET_FISCAL_PERIOD_ID to get Fiscal period Id for given Root Document
        try {
            callableStm = dbTransaction.createCallableStatement(FUNC_GET_FISCAL_PERIOD_ID, dbTransaction.DEFAULT);
            callableStm.setObject(2, rootDocument);
            callableStm.registerOutParameter(1, Types.VARCHAR);
            callableStm.execute();
            fiscalPeriodId = (String)callableStm.getObject(1);
        } catch (SQLException sqlEx) {
            new JboException(sqlEx);
        } finally {
            if (callableStm != null) {
                try {
                    callableStm.close();
                } catch (SQLException sqlEx1) {
                    new JboException(sqlEx1);
                }
            }
        }
        
        return fiscalPeriodId;
    }//findFiscalPeriodIdWithParams()
    
    /**
     * determine whether the given Reference Document exists or not. If not, the process wait for
     * givent waitime to recheck the given Reference Document again until it meetd the given processNum.
     * 
     * @param referenceDocument   String
     * @param processNum          int
     * @param waitTime            long
     * 
     * @return 1 if the given Reference Document exists. Otherwise, return 0.
     */
    public Number recheckReferenceDocument(String referenceDocument, int processNum, long waitTime) {
        boolean found = false;
        ViewObjectImpl eventLookupVO = getEventLookupView1();
        ViewCriteria vc = eventLookupVO.getViewCriteria("EventLookupViewCriteria");
        vc.resetCriteria();
        VariableValueManager vvm = vc.ensureVariableManager();
        vvm.setVariableValue("varCurrentDocument", referenceDocument);
        eventLookupVO.applyViewCriteria(vc, true);

        for (int i = 0; i < processNum; i++) {
            eventLookupVO.executeQuery();
            
            if (eventLookupVO.getRowCount() > 0) {
                found = true;
                break;             
            } else {
                try {
                    Thread.currentThread().sleep(waitTime);
                } catch (InterruptedException e) {
                }
            }           
        }
        
        if (found) {
            return new oracle.jbo.domain.Number(1);
        } else {
            return new oracle.jbo.domain.Number(0);
        }
    }//recheckReferenceDocument()
    
    /**
     * get SOA Email Recipient for Event Failure Notification. If it found, return 
     * Email alias of recipients. Otherwise, return null.
     * 
     * @return    String
     */
    public String findSOARecipient() {
        ViewObjectImpl refCodeListLookupVO = getReferenceCodeListLookupView1();
        refCodeListLookupVO.executeQuery();
        if (refCodeListLookupVO.getRowCount() > 0) {
            Row refCodeListRow = refCodeListLookupVO.getCurrentRow();
            if (refCodeListRow != null) {
                return (String) refCodeListRow.getAttribute("Description");
            }
        }

        return null;
    }//getSOARecipient()

    /**
     * validate both US Address and Foreign Address
     * 
     * @param state                String
     * @param zipCode              String
     * @param province             String
     * @param postalCode           String
     * @param countryAbbreviation  String
     * @return error message if found otherwise return empty string 
     */
    public String validateAddress(String state, String zipCode, String province, 
                                  String postalCode, String countryAbbreviation) {
        StringBuilder validateMsg = new StringBuilder("");

        if (countryAbbreviation != null && 
                !countryAbbreviation.equalsIgnoreCase("null") && 
                !countryAbbreviation.isEmpty()) {
            if (countryAbbreviation.equalsIgnoreCase("USA")) {
                //US Address
            
                if ((state == null || state.isEmpty()) &&  
                        (zipCode == null || zipCode.isEmpty())) {
                    validateMsg.append("Both State and Zip Code cannot be blank.");
                    return validateMsg.toString();
                } else if (state == null || state.isEmpty()) {
                    validateMsg.append("State cannot be blank.");
                    return validateMsg.toString();                        
                } else if (zipCode == null || zipCode.isEmpty()) {
                    validateMsg.append("Zip Code cannot be blank.");
                    return validateMsg.toString();                         
                } else if (postalCode != null && !postalCode.isEmpty() && 
                           province != null && !province.isEmpty()){
                    validateMsg.append("US Address could not have Postal Code and Province.");
                    return validateMsg.toString();                    
                } else if (postalCode != null && !postalCode.isEmpty()) {
                    validateMsg.append("US Address could not have Postal Code.");
                    return validateMsg.toString();                     
                } else if (province != null && !province.isEmpty()) {
                    validateMsg.append("US Address could not have Province.");
                    return validateMsg.toString();                    
                }
                
                if (state.length() != 2) {
                    validateMsg.append("State should have only 2 letters.");
                    return validateMsg.toString();                     
                }
                
                //validate ZipCode
                try {
                    Integer.parseInt(zipCode);
                    if (zipCode.length() < 5 || zipCode.length() > 5) {
                        validateMsg.append("Zip Code has only 5 digits.");
                        return validateMsg.toString();                       
                    }                        
                } catch (NumberFormatException nfe) {
                    validateMsg.append("Zip Code should be numeric.");
                    return validateMsg.toString();                          
                }                
            
                //validate State and Country Abbreviation
                if (!isStateCodeExisted(state, countryAbbreviation)) {
                    validateMsg.append("Invalid State ").append(state);
                    return validateMsg.toString();                                             
                }
            }
            else {
                //Foreign Address                                           
                if (state != null && !state.isEmpty() && zipCode != null && !zipCode.isEmpty()) {
                    validateMsg.append("Foreign Address could not have State and Zip Code.");
                    return validateMsg.toString();                    
                } else if (state != null && !state.isEmpty()) {
                    validateMsg.append("Foreign Address could not have State.");
                    return validateMsg.toString();                     
                } else if (zipCode != null && !zipCode.isEmpty()) {
                     validateMsg.append("Foreign Address could not have Zip Code.");
                    return validateMsg.toString();                    
                }  
                
                if (postalCode == null || postalCode.isEmpty()) {
                    validateMsg.append("Postal Code cannot be blank.");
                    return validateMsg.toString();                         
                }     
                
                if (postalCode.length() > 12) {
                    validateMsg.append("Postal Code could have only 12 alphanumeric characters.");
                    return validateMsg.toString();                        
                }                

                if (!isCountryCodeExisted(countryAbbreviation)) {
                    validateMsg.append("Invalid Country Abbreviation ").append(countryAbbreviation);
                    return validateMsg.toString();                    
                }
            }
        } else {
            if (state.isEmpty() && zipCode.isEmpty() && province.isEmpty() && 
                    postalCode.isEmpty()) {
                validateMsg.append("Either State, ZipCode, and Country Abbreviation ").append(
                    "or Province, Postal Code, and Country Abbreviation cannot be blank.");
                
                return validateMsg.toString(); 
            } else if (!state.isEmpty()  && ! zipCode.isEmpty() && 
                    !province.isEmpty()  && !postalCode.isEmpty()) { 
                validateMsg.append("Address could not have both ").append(
                    "US Address and Foreign Address.");
                
                return validateMsg.toString();  
            } else {
                validateMsg.append("Country Abbreviation cannot be blank");              
                return validateMsg.toString();                
           }
        }
        
        return validateMsg.toString();
    }//validateAddress()
    
    
    /**
     * validate given State Code and Country Code from StateCode lookup view object.
     * @param stateCode      String
     * @param countryCode    String
     * @return true if they are valid,ortherwise; return false.
     */
    private boolean isStateCodeExisted(String stateCode, String countryCode) {
        boolean found = false;
        ViewObjectImpl stateCodeLookupVO = getStateCodeLookupView1();
        ViewCriteria vc = stateCodeLookupVO.getViewCriteria("StateCodeLookupViewCriteria");
        vc.resetCriteria();
        VariableValueManager vvm = vc.ensureVariableManager();
        vvm.setVariableValue("varStateCode", stateCode);
        vvm.setVariableValue("varCountryCode", countryCode);
        stateCodeLookupVO.applyViewCriteria(vc, true);
        stateCodeLookupVO.executeQuery();
        if (stateCodeLookupVO.getRowCount() > 0) {
            found = true;
        }
        
        return found;
    }//isStateCodeExisted()
    
    /**
     * validate given Country Code From Country Code lookup view object
     * @param countryCode   String
     * @return if it is valid,ortherwise; return false.
     */
    private boolean isCountryCodeExisted(String countryCode) {
        boolean found = false;
        ViewObjectImpl countryCodeLookupVO = getCountryCodeLookupView1();
        ViewCriteria vc = countryCodeLookupVO.getViewCriteria("CountryCodeLookupViewCriteria");
        vc.resetCriteria();
        VariableValueManager vvm = vc.ensureVariableManager();
        vvm.setVariableValue("varCountryCode", countryCode);
        countryCodeLookupVO.applyViewCriteria(vc, true);
        countryCodeLookupVO.executeQuery();
        if (countryCodeLookupVO.getRowCount() > 0) {
            found = true;
        }
        
        return found;
    }//isCountryCodeExisted()

}
